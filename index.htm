<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Finder Game</title>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #1E3A8A, #064E3B);
            color: #E0FFFF;
        }
        .game-container {
            background: #1A202C;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
            max-width: 900px;
            width: 100%;
            height:100%;
            text-align: center;
            border: 1px solid #00CED1;
        }
        h1 {
            font-size: 1.8em;
            margin: 0 0 20px;
            color: #00FFFF;
            text-shadow: 0 0 10px #00CED1;
        }
        select, button, input {
            padding: 12px;
            font-size: 1em;
            margin: 10px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #2D3748;
            color: #E0FFFF;
            border: 2px solid #00CED1;
        }
        select:focus, input:focus {
            outline: none;
            border-color: #00FFFF;
            box-shadow: 0 0 10px #00FFFF;
        }
        button {
            background: #00CED1;
            color: #1A202C;
        }
        button:hover {
            background: #00FFFF;
            box-shadow: 0 0 15px #00FFFF;
        }
        .board {
            display: grid;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
        }
        .card {
            width: 70px;
            height: 70px;
            border-radius: 8px;
            cursor: pointer;
            perspective: 1000px;
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: scale(1.1);
            box-shadow: 0 0 15px #00CED1;
        }
        .card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            transform-style: preserve-3d;
            box-shadow: 0 0 10px rgba(0, 255, 255, 0.2);
        }
        .card.flipped .card-inner {
            transform: rotateY(180deg);
        }
        .card-front, .card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .card-front {
            background: linear-gradient(135deg, #2A4365, #1A202C);
            box-shadow: inset 0 0 15px rgba(0, 206, 209, 0.5);
            border: 2px solid #00CED1;
        }
        .card-back {
            transform: rotateY(180deg);
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
            border: 2px solid #00CED1;
        }
        .card.red .card-back { background: linear-gradient(135deg, #FF4757, #B91C1C); }
        .card.green .card-back { background: linear-gradient(135deg, #2ED573, #15803D); }
        .card.blue .card-back { background: linear-gradient(135deg, #1E90FF, #1E3A8A); }
        .card.yellow .card-back { background: linear-gradient(135deg, #FFD700, #FFA500); }
        .card.purple .card-back { background: linear-gradient(135deg, #DA70D6, #800080); }
        .card.orange .card-back { background: linear-gradient(135deg, #FF8C00, #FF4500); }
        .card.pink .card-back { background: linear-gradient(135deg, #FF69B4, #C71585); }
        .card.wrong {
            animation: shake 0.5s;
        }
        .card.match {
            animation: pulse 0.5s infinite alternate;
        }
        @keyframes shake {
            0% { transform: translateX(0); }
            20% { transform: translateX(-10px); }
            40% { transform: translateX(10px); }
            60% { transform: translateX(-10px); }
            80% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        @keyframes pulse {
            from { transform: scale(1); box-shadow: 0 0 10px #00CED1; }
            to { transform: scale(1.05); box-shadow: 0 0 20px #00FFFF; }
        }
        #status {
            font-size: 1.3em;
            margin: 15px 0;
            color: #E0FFFF;
            font-weight: 500;
            text-shadow: 0 0 5px #00CED1;
        }
        #score {
            font-size: 1.2em;
            margin: 10px 0;
            color: #00FFFF;
            text-shadow: 0 0 5px #00CED1;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal-content {
            background: #1A202C;
            padding: 25px;
            border-radius: 12px;
            max-width: 600px;
            width: 85%;
            text-align: left;
            position: relative;
            color: #E0FFFF;
            border: 2px solid #00CED1;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.4);
            animation: modalFadeIn 0.3s ease;
        }
        @keyframes modalFadeIn {
            from { opacity: 0; transform: scale(0.8); }
            to { opacity: 1; transform: scale(1); }
        }
        .modal-content h2 {
            margin: 0 0 15px;
            color: #00FFFF;
            text-shadow: 0 0 5px #00CED1;
        }
        .modal-content p {
            margin: 10px 0;
            line-height: 1.5;
        }
        .close {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 1.5em;
            cursor: pointer;
            color: #FF4757;
            transition: color 0.3s;
        }
        .close:hover {
            color: #00FFFF;
        }
        #difficultySelect{width: 200px;}
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Color Finder Game</h1>
        <select id="difficultySelect">
            <option value="beginner">Beginner (3x2, 2-3 matches, 3 colors: RGB)</option>
            <option value="easy">Easy (4x3, 3-4 matches, 3 colors: RGB)</option>
            <option value="medium">Medium (5x4, 4-5 matches, 4 colors)</option>
            <option value="hard">Hard (6x5, 5-6 matches, 4 colors)</option>
            <option value="expert">Expert (7x6, 6-7 matches, 5 colors)</option>
            <option value="master">Master (8x7, 7-8 matches, 5 colors)</option>
            <option value="legend">Legend (9x8, 8-9 matches, 6 colors)</option>
            <option value="grandmaster">Grandmaster (10x8, 8-10 matches, 6 colors)</option>
            <option value="epic">Epic (9x9, 9-10 matches, 7 colors)</option>
            <option value="mythic">Mythic (10x9, 9-10 matches, 7 colors)</option>
        </select>
        <select id="colorSelect">
            <option value="" disabled selected>Pick a color</option>
            <option value="red">Red</option>
            <option value="green">Green</option>
            <option value="blue">Blue</option>
            <option value="yellow">Yellow</option>
            <option value="purple">Purple</option>
            <option value="orange">Orange</option>
            <option value="pink">Pink</option>
        </select>
        
        <div id="score">Score: 0 <div id="status">Select a color and difficulty to start!</div></div>
        
        <div class="board" id="board"></div>
    </div>
    <div id="moreModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Rules</h2>
            <p>1. Choose a difficulty: Beginner (3x2, 2-3 matches, 3 colors: Red, Green, Blue), Easy (4x3, 3-4 matches, 3 colors: Red, Green, Blue), Medium (5x4, 4-5 matches, 4 colors), Hard (6x5, 5-6 matches, 4 colors), Expert (7x6, 6-7 matches, 5 colors), Master (8x7, 7-8 matches, 5 colors), Legend (9x8, 8-9 matches, 6 colors), Grandmaster (10x8, 8-10 matches, 6 colors), Epic (9x9, 9-10 matches, 7 colors), or Mythic (10x9, 9-10 matches, 7 colors).</p>
            <p>2. Select a color from the dropdown menu (Red, Green, Blue, Yellow, Purple, Orange, or Pink).</p>
            <p>3. You have 3 chances to find one card with your chosen color.</p>
            <p>4. Click a card to flip it and reveal its color.</p>
            <p>5. If you find a matching color, you earn 1 point and a new game starts automatically.</p>
            <p>6. If you use all 3 chances without finding a match, a new game starts without adding a point.</p>
            <p>7. Change difficulty or color to reset the game and score.</p>
        </div>
    </div>
    <script>
        const difficulties = {
            beginner: { rows: 3, cols: 2, minMatches: 2, maxMatches: 3, numColors: 3 },
            easy: { rows: 4, cols: 3, minMatches: 3, maxMatches: 4, numColors: 3 },
            medium: { rows: 5, cols: 4, minMatches: 4, maxMatches: 5, numColors: 4 },
            hard: { rows: 6, cols: 5, minMatches: 5, maxMatches: 6, numColors: 4 },
            expert: { rows: 7, cols: 6, minMatches: 6, maxMatches: 7, numColors: 5 },
            master: { rows: 8, cols: 7, minMatches: 7, maxMatches: 8, numColors: 5 },
            legend: { rows: 9, cols: 8, minMatches: 8, maxMatches: 9, numColors: 6 },
            grandmaster: { rows: 10, cols: 8, minMatches: 8, maxMatches: 10, numColors: 6 },
            epic: { rows: 9, cols: 9, minMatches: 9, maxMatches: 10, numColors: 7 },
            mythic: { rows: 10, cols: 9, minMatches: 9, maxMatches: 10, numColors: 7 }
        };
        const allColors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange', 'pink'];
        let selectedColor = null;
        let selectedDifficulty = 'beginner';
        let chances = 3;
        let score = 0;
        let cards = [];
        let gameOver = false;

        const board = document.getElementById('board');
        const status = document.getElementById('status');
        const scoreDisplay = document.getElementById('score');
        const colorSelect = document.getElementById('colorSelect');
        const difficultySelect = document.getElementById('difficultySelect');
        const moreBtn = document.getElementById('moreBtn');
        const modal = document.getElementById('moreModal');
        const closeModal = document.querySelector('.close');

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function setupBoard() {
            board.innerHTML = '';
            const { rows, cols, minMatches, maxMatches, numColors } = difficulties[selectedDifficulty];
            const totalCards = rows * cols;
            board.style.gridTemplateColumns = `repeat(${cols}, 70px)`;
            const numMatches = Math.floor(Math.random() * (maxMatches - minMatches + 1)) + minMatches;

            // Use only RGB for 3-color levels, otherwise use all colors up to numColors
            const colorPool = (numColors === 3) ? ['red', 'green', 'blue'] : allColors.slice(0, numColors);
            cards = Array(numMatches).fill(selectedColor);
            const availableColors = shuffle([...colorPool]).filter(color => color !== selectedColor);
            for (let i = numMatches; i < totalCards; i++) {
                cards.push(availableColors[Math.floor(Math.random() * availableColors.length)]);
            }
            cards = shuffle(cards);
            cards.forEach(color => {
                const card = document.createElement('div');
                card.classList.add('card');
                card.dataset.color = color;
                const cardInner = document.createElement('div');
                cardInner.classList.add('card-inner');
                const cardFront = document.createElement('div');
                cardFront.classList.add('card-front');
                const cardBack = document.createElement('div');
                cardBack.classList.add('card-back');
                cardInner.appendChild(cardFront);
                cardInner.appendChild(cardBack);
                card.appendChild(cardInner);
                card.addEventListener('click', () => flipCard(card));
                board.appendChild(card);
            });
        }

        function flipCard(card) {
            if (gameOver || card.classList.contains('flipped') || !selectedColor) {
                return;
            }
            card.classList.add('flipped', card.dataset.color);
            chances--;
            status.textContent = `Chances left: ${chances}`;
            if (card.dataset.color === selectedColor) {
                card.classList.add('match');
                score++;
                scoreDisplay.textContent = `Score: ${score}`;
                status.textContent = 'You win! 🎉 Starting new game...';
                gameOver = true;
                setTimeout(() => {
                    resetGame(false);
                }, 1500);
            } else {
                card.classList.add('wrong');
                setTimeout(() => card.classList.remove('wrong'), 500);
                if (chances === 0) {
                    status.textContent = 'Game over! Starting new game...';
                    gameOver = true;
                    setTimeout(() => {
                        resetGame(false);
                    }, 1500);
                }
            }
        }

        function resetGame(resetScore = false) {
            chances = 3;
            gameOver = false;
            if (resetScore) score = 0;
            scoreDisplay.textContent = `Score: ${score}`;
            status.textContent = selectedColor ? `Chances left: ${chances}` : 'Select a color to start!';
            document.querySelectorAll('.card').forEach(card => card.classList.remove('flipped', 'red', 'green', 'blue', 'yellow', 'purple', 'orange', 'pink', 'wrong', 'match'));
            setupBoard();
        }

        colorSelect.addEventListener('change', () => {
            selectedColor = colorSelect.value;
            resetGame(true);
        });

        difficultySelect.addEventListener('change', () => {
            selectedDifficulty = difficultySelect.value;
            resetGame(true);
        });

        moreBtn.addEventListener('click', () => {
            modal.style.display = 'flex';
        });

        closeModal.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        window.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });

        setupBoard();
        status.textContent = 'Select a color and difficulty to start!';
    </script>
</body>
</html>
